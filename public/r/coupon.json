{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "coupon",
  "type": "registry:block",
  "title": "Coupon Generator",
  "description": "A coupon code generator component for billing and promotional purposes",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "card",
    "button",
    "input",
    "switch",
    "label",
    "select"
  ],
  "files": [
    {
      "path": "src/registry/billingsdk/coupon.tsx",
      "content": "\"use client\"\n\nimport { useState } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardHeader, CardTitle, CardContent, CardFooter } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Switch } from \"@/components/ui/switch\"\nimport { Label } from \"@/components/ui/label\"\nimport { Copy, ArrowLeft, Share2, Scissors } from \"lucide-react\"\nimport {\n    Select,\n    SelectContent,\n    SelectGroup,\n    SelectItem,\n    SelectLabel,\n    SelectTrigger,\n    SelectValue,\n} from \"@/components/ui/select\"\n\ninterface CouponGeneratorProps {\n    companyName: string\n    applicableOptions?: { label: string; value: string }[]\n    onGenerate: (couponData: {\n        code: string\n        discount: number\n        rule: string\n        startDate?: string\n        endDate?: string\n    }) => void\n    onCopy?: (code: string) => void\n    onShare?: (code: string) => void\n    className?: string\n    cardClassName?: string\n    generateButtonClassName?: string\n    defaultCode?: string\n}\n\n\n\nexport default function CouponGenerator({\n    companyName,\n    applicableOptions = [],\n    onGenerate,\n    onCopy,\n    onShare,\n    className,\n    cardClassName,\n    generateButtonClassName,\n    defaultCode,\n}: CouponGeneratorProps) {\n    const [enabled, setEnabled] = useState(false)\n    const [startDate, setStartDate] = useState(\"\")\n    const [endDate, setEndDate] = useState(\"\")\n    const [generated, setGenerated] = useState(false)\n    const [customCode, setCustomCode] = useState(\"DODO20\")\n    const [discount, setDiscount] = useState(20)\n    const [selectedRule, setSelectedRule] = useState(\"\")\n    const [generatedCouponCode, setGeneratedCouponCode] = useState(\"\")\n\n    const isFormValid = selectedRule.trim() !== \"\" && startDate.trim() !== \"\" && endDate.trim() !== \"\"\n\n    const handleGenerate = () => {\n        console.log(\"[v0] Form validation check:\", { selectedRule, startDate, endDate, isFormValid })\n\n        if (!selectedRule.trim() || !startDate.trim() || !endDate.trim()) {\n            console.log(\"[v0] Validation failed - missing required fields\")\n            alert(\"Please fill in all required fields: Applicable rule, Start date, and End date\")\n            return\n        }\n\n        let code: string\n        if (enabled && customCode.trim()) {\n            code = customCode.trim()\n        } else if (defaultCode) {\n            code = defaultCode\n        } else {\n            code = `COUPON${Math.floor(Math.random() * 10000)}`\n        }\n\n        console.log(\"[v0] Generating coupon with code:\", code)\n\n        const couponData = {\n            code,\n            discount,\n            rule: selectedRule,\n            startDate,\n            endDate,\n        }\n\n        setGeneratedCouponCode(code)\n        onGenerate(couponData)\n        setGenerated(true)\n    }\n\n    const safeApplicableOptions = applicableOptions || [];\n\n    return (\n        <div\n            className={`min-h-screen w-full flex justify-center items-center p-4 bg-zinc-50 dark:bg-zinc-950 ${className || \"\"}`}\n        >\n            {generated ? (\n                <Card\n                    className={`w-full max-w-md animate-in fade-in-0 slide-in-from-bottom-4 duration-700 border-zinc-200 dark:border-zinc-800 bg-white dark:bg-zinc-900 shadow-2xl ${cardClassName || \"\"}`}\n                >\n                    <CardContent className=\"p-0\">\n                        <div className=\"relative overflow-hidden\">\n                            <div className=\"bg-zinc-900 dark:bg-zinc-100 p-6 relative\">\n                                <div className=\"absolute top-0 left-0 w-full h-full opacity-5\">\n                                    <div className=\"w-full h-full bg-[repeating-linear-gradient(45deg,transparent,transparent_10px,rgba(255,255,255,0.1)_10px,rgba(255,255,255,0.1)_20px)]\"></div>\n                                </div>\n                                <div className=\"relative z-10 text-center\">\n                                    <div className=\"inline-flex items-center gap-2 mb-2\">\n                                        <Scissors className=\"w-4 h-4 text-white dark:text-zinc-900\" />\n                                        <span className=\"text-xs font-medium text-zinc-400 dark:text-zinc-600 uppercase tracking-wider\">\n                                            Coupon\n                                        </span>\n                                    </div>\n                                    <div className=\"text-3xl font-bold text-white dark:text-zinc-900 tracking-tight mb-1\">\n                                        {generatedCouponCode}\n                                    </div>\n                                    <div className=\"text-sm text-zinc-300 dark:text-zinc-700 font-medium\">{companyName}</div>\n                                </div>\n                            </div>\n\n                            <div className=\"p-6 bg-white dark:bg-zinc-900\">\n                                <div className=\"text-center space-y-2\">\n                                    <div className=\"text-2xl font-bold text-zinc-900 dark:text-white\">{discount}% OFF</div>\n                                    <div className=\"text-sm text-zinc-600 dark:text-zinc-400\">Valid until selected date</div>\n                                </div>\n                            </div>\n\n                            <div className=\"absolute left-0 top-1/2 transform -translate-y-1/2 w-6 h-6 bg-zinc-50 dark:bg-zinc-950 rounded-full -ml-3 border-2 border-zinc-200 dark:border-zinc-800\"></div>\n                            <div className=\"absolute right-0 top-1/2 transform -translate-y-1/2 w-6 h-6 bg-zinc-50 dark:bg-zinc-950 rounded-full -mr-3 border-2 border-zinc-200 dark:border-zinc-800\"></div>\n                        </div>\n                    </CardContent>\n\n                    <CardFooter className=\"flex justify-between items-center p-4 bg-zinc-50 dark:bg-zinc-900/50 border-t border-zinc-200 dark:border-zinc-800\">\n                        <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => setGenerated(false)}\n                            className=\"text-zinc-600 dark:text-zinc-400 hover:text-zinc-900 dark:hover:text-white transition-colors\"\n                        >\n                            <ArrowLeft className=\"w-4 h-4 mr-1\" />\n                            Back\n                        </Button>\n                        <div className=\"flex gap-2\">\n                            <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => onCopy?.(generatedCouponCode)}\n                                className=\"border-zinc-200 dark:border-zinc-700 hover:bg-zinc-100 dark:hover:bg-zinc-800 transition-colors bg-transparent\"\n                            >\n                                <Copy className=\"w-4 h-4 mr-1\" />\n                                Copy\n                            </Button>\n                            <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => onShare?.(generatedCouponCode)}\n                                className=\"border-zinc-200 dark:border-zinc-700 hover:bg-zinc-100 dark:hover:bg-zinc-800 transition-colors bg-transparent\"\n                            >\n                                <Share2 className=\"w-4 h-4 mr-1\" />\n                                Share\n                            </Button>\n                        </div>\n                    </CardFooter>\n                </Card>\n            ) : (\n                <Card\n                    className={`w-full max-w-md animate-in fade-in-0 slide-in-from-bottom-4 duration-700 border-zinc-200 dark:border-zinc-800 bg-white dark:bg-zinc-900 shadow-2xl ${cardClassName || \"\"}`}\n                >\n                    <CardHeader className=\"pb-4\">\n                        <CardTitle className=\"text-xl font-semibold text-zinc-900 dark:text-white text-center\">\n                            Create Coupon Code\n                        </CardTitle>\n                    </CardHeader>\n\n                    <div className=\"h-px bg-zinc-200 dark:bg-zinc-800 mx-6\"></div>\n\n                    <CardContent className=\"space-y-6 p-6\">\n                        <div className=\"grid grid-cols-2 gap-4\">\n                            <div className=\"space-y-2\">\n                                <Label htmlFor=\"discount\" className=\"text-sm font-medium text-zinc-700 dark:text-zinc-300\">\n                                    Discount (%)\n                                </Label>\n                                <Input\n                                    type=\"number\"\n                                    id=\"discount\"\n                                    value={discount}\n                                    onChange={(e) => setDiscount(Number(e.target.value))}\n                                    min={0}\n                                    className=\"transition-all duration-200 hover:border-zinc-400 dark:hover:border-zinc-600 focus:scale-[1.01]\"\n                                />\n                            </div>\n\n                            <div className=\"space-y-2\">\n                                <Label htmlFor=\"applicable\" className=\"text-sm font-medium text-zinc-700 dark:text-zinc-300\">\n                                    Applicable to <span className=\"text-red-500\">*</span>\n                                </Label>\n                                <Select value={selectedRule} onValueChange={setSelectedRule}>\n                                    <SelectTrigger className=\"transition-all duration-200 hover:border-zinc-400 dark:hover:border-zinc-600\">\n                                        <SelectValue placeholder=\"Select rule\" />\n                                    </SelectTrigger>\n                                    <SelectContent className=\"border-zinc-200 dark:border-zinc-700\">\n                                        <SelectGroup>\n                                            <SelectLabel className=\"text-zinc-600 dark:text-zinc-400\">Rules</SelectLabel>\n                                            {safeApplicableOptions.map((option) => (\n                                                <SelectItem key={option.value} value={option.value}>\n                                                    {option.label}\n                                                </SelectItem>\n                                            ))}\n                                        </SelectGroup>\n                                    </SelectContent>\n                                </Select>\n                            </div>\n                        </div>\n\n                        <div className=\"space-y-3 animate-in fade-in-0 slide-in-from-left-4 duration-500 delay-200\">\n                            <Label className=\"text-sm font-medium text-zinc-700 dark:text-zinc-300\">\n                                Validity Period <span className=\"text-red-500\">*</span>\n                            </Label>\n                            <div className=\"grid grid-cols-2 gap-3\">\n                                <div className=\"space-y-2\">\n                                    <Label htmlFor=\"start-date\" className=\"text-xs text-zinc-500 dark:text-zinc-500\">\n                                        Start Date\n                                    </Label>\n                                    <Input\n                                        type=\"date\"\n                                        id=\"start-date\"\n                                        value={startDate}\n                                        onChange={(e) => setStartDate(e.target.value)}\n                                        className=\"transition-all duration-200 hover:border-zinc-400 dark:hover:border-zinc-600 focus:scale-[1.01]\"\n                                    />\n                                </div>\n                                <div className=\"space-y-2\">\n                                    <Label htmlFor=\"end-date\" className=\"text-xs text-zinc-500 dark:text-zinc-500\">\n                                        End Date\n                                    </Label>\n                                    <Input\n                                        type=\"date\"\n                                        id=\"end-date\"\n                                        value={endDate}\n                                        onChange={(e) => setEndDate(e.target.value)}\n                                        className=\"transition-all duration-200 hover:border-zinc-400 dark:hover:border-zinc-600 focus:scale-[1.01]\"\n                                    />\n                                </div>\n                            </div>\n                        </div>\n\n                        <div className=\"space-y-3\">\n                            <div className=\"flex items-center space-x-3\">\n                                <Switch\n                                    id=\"custom-code\"\n                                    checked={enabled}\n                                    onCheckedChange={setEnabled}\n                                    className=\"data-[state=checked]:bg-zinc-900 dark:data-[state=checked]:bg-zinc-100\"\n                                />\n                                <Label htmlFor=\"custom-code\" className=\"text-sm font-medium text-zinc-700 dark:text-zinc-300\">\n                                    Custom Code\n                                </Label>\n                            </div>\n                            {enabled && (\n                                <Input\n                                    className=\"animate-in fade-in-0 slide-in-from-top-2 duration-300 transition-all hover:border-zinc-400 dark:hover:border-zinc-600\"\n                                    placeholder=\"DODO20\"\n                                    value={customCode}\n                                    onChange={(e) => setCustomCode(e.target.value)}\n                                />\n                            )}\n                        </div>\n                    </CardContent>\n\n                    <CardFooter className=\"flex justify-end p-6 pt-0\">\n                        <Button\n                            onClick={handleGenerate}\n                            disabled={!isFormValid}\n                            className={`bg-zinc-900 dark:bg-zinc-100 text-white dark:text-zinc-900 hover:bg-zinc-800 dark:hover:bg-zinc-200 transition-all duration-200 hover:scale-[1.02] shadow-lg disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100 disabled:bg-zinc-900 dark:disabled:bg-zinc-100 ${generateButtonClassName || \"\"}`}\n                        >\n                            Generate Coupon\n                        </Button>\n                    </CardFooter>\n                </Card>\n            )}\n        </div>\n    )\n}",
      "type": "registry:component",
      "target": "components/billingsdk/coupon.tsx"
    },
    {
      "path": "src/registry/billingsdk/demo/coupon-demo.tsx",
      "content": "\n\"use client\"\n\nimport CouponGenerator from \"@/registry/billingsdk/coupon\"\n\nfunction generateRandomCode(length = 8) {\n  const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n  let result = \"\"\n  for (let i = 0; i < length; i++) {\n    result += chars.charAt(Math.floor(Math.random() * chars.length))\n  }\n  return result\n}\n\nexport default function CouponDemo() {\n  const handleGenerate = (couponData: {\n    code: string\n    discount: number\n    rule: string\n    startDate?: string\n    endDate?: string\n  }) => {\n    console.log(\"Generated Coupon:\", couponData)\n  }\n\n  const handleCopy = (code: string) => {\n    console.log(\"Copied Coupon Code:\", code)\n    navigator.clipboard.writeText(code)\n  }\n\n  const handleShare = (code: string) => {\n    console.log(\"Sharing Coupon Code:\", code)\n  }\n\n  return (\n    <div className=\"min-h-screen w-full flex justify-center items-center p-4 bg-zinc-50 dark:bg-zinc-950\">\n      <CouponGenerator\n        companyName=\"Dodopayments\"\n        applicableOptions={[\n          { label: \"For new users only\", value: \"new-users\" },\n          { label: \"For existing users only\", value: \"existing-users\" },\n          { label: \"For all users\", value: \"all-users\" },\n          { label: \"Premium subscribers\", value: \"premium-subscribers\" },\n        ]}\n        onGenerate={handleGenerate}\n        onCopy={handleCopy}\n        onShare={handleShare}\n        defaultCode={generateRandomCode()} \n      />\n    </div>\n  )\n}",
      "type": "registry:component",
      "target": "components/coupon-demo.tsx"
    }
  ]
}